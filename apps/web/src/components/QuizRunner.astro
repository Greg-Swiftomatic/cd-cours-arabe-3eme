---
import type { LessonDetail, QuizConfig } from "@lib/content";

interface Props {
  lesson: LessonDetail;
  quiz: QuizConfig | null;
}

const { lesson, quiz } = Astro.props as Props;
const hasQuestions = quiz && quiz.questions.length > 0;
---

<section class="glass-panel space-y-6 p-8">
  <header class="flex flex-col gap-2">
    <h2 class="font-display text-3xl text-gray-900">اختبار الدرس</h2>
    <p class="text-sm text-gray-600">
      أجب عن الأسئلة التالية لتتأكد من فهمك لدرس {lesson.title_ar}.
    </p>
  </header>

  {hasQuestions ? (
    <form
      class="space-y-6"
      data-quiz-form
      data-lesson={lesson.slug}
      data-pass-threshold={quiz?.pass_threshold ?? 0}
    >
      {quiz?.questions.map((question, index) => (
        <fieldset
          class="space-y-4 rounded-2xl border border-gray-200 bg-white p-6 transition hover:border-primary-400 hover:shadow-md"
          data-answer={question.answer_index}
          data-question-id={question.id}
        >
          <legend
            class="flex items-center justify-between font-display text-2xl text-gray-900"
            dir="rtl"
          >
            <span>{question.prompt_ar}</span>
            <span class="rounded-full bg-primary-100 px-3 py-1 text-xs font-semibold text-primary-700">
              سؤال {index + 1}
            </span>
          </legend>
          <div class="space-y-3" dir="rtl">
            {question.choices_ar?.map((choice, choiceIndex) => (
              <label class="flex items-center gap-3 rounded-2xl border border-gray-200 bg-gray-50 px-4 py-3 text-right text-sm leading-7 text-gray-900 transition hover:border-primary-400 hover:bg-primary-50 cursor-pointer">
                <input
                  type="radio"
                  name={question.id}
                  value={choiceIndex}
                  required
                  class="h-4 w-4 border-gray-300 text-primary-600 focus:ring-primary-500"
                />
                <span class="flex-1">{choice}</span>
              </label>
            ))}
          </div>
          {question.explain_fr && (
            <p class="hidden rounded-xl bg-blue-50 border border-blue-200 px-4 py-3 text-sm text-gray-700" data-explain>
              {question.explain_fr}
            </p>
          )}
        </fieldset>
      ))}
      <button
        type="submit"
        class="relative inline-flex items-center justify-center gap-2 overflow-hidden rounded-full bg-primary-600 px-10 py-3 text-lg font-semibold text-white shadow-lg transition hover:bg-primary-700 hover:scale-[1.01]"
      >
        إرسال الإجابات
      </button>
    </form>
  ) : (
    <p class="text-sm text-gray-600">
      الاختبار قيد التحضير. عد لاحقًا للاطلاع على التحديات الجديدة.
    </p>
  )}

  <div
    class="hidden rounded-2xl border border-gray-200 bg-white p-6 text-sm text-gray-700"
    data-quiz-result
  ></div>
</section>

<script type="module">
  const form = document.querySelector("[data-quiz-form]");
  const resultBox = document.querySelector("[data-quiz-result]");

  if (form && resultBox) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const fieldsets = Array.from(
        form.querySelectorAll("fieldset[data-answer]"),
      );

      let correct = 0;
      const detail = [];

      fieldsets.forEach((fieldset) => {
        const answerIndex = Number(fieldset.dataset.answer);
        const questionId = fieldset.dataset.questionId ?? "";
        const checked = fieldset.querySelector(
          `input[name="${questionId}"]:checked`,
        );
        const selectedIndex = checked ? Number(checked.value) : null;

        const isCorrect = selectedIndex === answerIndex;
        if (isCorrect) correct += 1;

        detail.push({
          questionId,
          selectedIndex,
          answerIndex,
          correct: isCorrect,
        });

        const explanation = fieldset.querySelector("[data-explain]");
        if (explanation instanceof HTMLElement) {
          explanation.hidden = false;
          if (!isCorrect) {
            explanation.classList.remove("bg-blue-50", "border-blue-200");
            explanation.classList.add("bg-red-50", "border-red-200", "text-red-900");
          } else {
            explanation.classList.remove("bg-blue-50", "border-blue-200");
            explanation.classList.add("bg-green-50", "border-green-200", "text-green-900");
          }
        }

        fieldset.classList.toggle("border-green-500", isCorrect);
        fieldset.classList.toggle("bg-green-50", isCorrect);
        fieldset.classList.toggle("border-red-500", !isCorrect);
        fieldset.classList.toggle("bg-red-50", !isCorrect);
      });

      const score =
        fieldsets.length > 0
          ? Math.round((correct / fieldsets.length) * 100)
          : 0;
      const passThreshold = Number(form.dataset.passThreshold ?? 0);

      resultBox.classList.remove("hidden");
      resultBox.innerHTML = `
        <div class="flex flex-col gap-2 text-right">
          <span class="text-lg font-semibold text-gray-900">نتيجتك: ${score}/100</span>
          <span class="text-gray-700">${
            score >= passThreshold
              ? "ممتاز! لقد تجاوزت الحد المطلوب لهذا الدرس."
              : "تابع التدريب لتحصل على نتيجة أعلى وتفهمًا أعمق."
          }</span>
        </div>
      `;

      try {
        await fetch("/api/attempts", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            lessonSlug: form.dataset.lesson,
            score,
            detail,
            quizId: null,
          }),
        });
      } catch (error) {
        console.error("تعذر حفظ المحاولة", error);
      }
    });
  }
</script>
